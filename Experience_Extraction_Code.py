# -*- coding: utf-8 -*-
"""Untitled38.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oYI7onpEl_5aTahIs3wIBzZjJyCSdVjn
"""

# üì¶ Install dependencies
!pip install transformers
!pip install spacy
!python -m spacy download en_core_web_sm

# üìö Imports
import pandas as pd
import spacy
from transformers import pipeline

# üìÅ Load Excel
df = pd.read_excel('Job Descriptions.xlsx')
df.head()

# ü§ñ Load Models
nlp_spacy = spacy.load("en_core_web_sm")

minilm_qa = pipeline("question-answering", model="deepset/minilm-uncased-squad2")
t5_qa = pipeline("question-answering", model="t5-small")

# üß† Define Extraction Functions

# 1. Keyword Heuristic
def extract_keywords(text):
    text = text.lower()
    for word in text.split():
        if word.isdigit():
            idx = text.find(word)
            snippet = text[idx:idx + 20]
            if any(k in snippet for k in ["year", "yrs", "yr"]):
                return word
    return "Not found"

# 2. spaCy NER
def extract_spacy(text):
    doc = nlp_spacy(text)
    for ent in doc.ents:
        if ent.label_ == "CARDINAL":
            span = text[ent.start_char:ent.end_char + 15].lower()
            if "year" in span or "yrs" in span:
                return ent.text
    return "Not found"

# 3. MiniLM QA
def extract_minilm(text):
    try:
        result = minilm_qa(question="How many years of experience is required?", context=text)
        return result.get('answer', 'Not found')
    except:
        return "Error"

# 4. T5 QA
def extract_t5(text):
    try:
        result = t5_qa(question="How many years of experience is required?", context=text)
        return result.get('answer', 'Not found')
    except:
        return "Error"

# 5. Custom Rule Heuristic
def extract_custom_rule(text):
    lower_text = text.lower()
    phrases = ["minimum", "at least", "experience of", "requires", "need"]
    for phrase in phrases:
        if phrase in lower_text:
            start = lower_text.find(phrase)
            snippet = lower_text[start:start + 50]
            for word in snippet.split():
                if word.isdigit():
                    return word
    return "Not found"

# üìù Apply All 5 Techniques
df['Keyword_Heuristic'] = df['Job Descriptions'].apply(lambda x: extract_keywords(str(x)))

df['Spacy_Experience'] = df['Job Descriptions'].apply(lambda x: extract_spacy(str(x)))

df['MiniLM_Experience'] = df['Job Descriptions'].apply(lambda x: extract_minilm(str(x)))

df['T5_Experience'] = df['Job Descriptions'].apply(lambda x: extract_t5(str(x)))

df['Custom_Rule_Experience'] = df['Job Descriptions'].apply(lambda x: extract_custom_rule(str(x)))

df.head()

# üíæ Save the Output
output_file = "/content/experience_extraction_fast_5_miniLM.xlsx"
df.to_excel(output_file, index=False)
print("‚úÖ Output saved to:", output_file)

# üì• Download the Result
from google.colab import files
files.download(output_file)

